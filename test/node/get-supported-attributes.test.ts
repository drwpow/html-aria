import { describe, expect, test } from 'vitest';
import {
  type ARIAAttribute,
  NO_ATTRIBUTES,
  attributes,
  getSupportedAttributes,
  globalAttributes,
  isSupportedAttribute,
  isValidAttributeValue,
  removeProhibited,
  roles,
  tags,
} from '../../src/index.js';
import { checkTestAndTagName } from '../helpers.js';

// These tests are the most difficult to write—it’s very easy to make them
// circular. To avoid that, it’s worth describing where the data came from.
//
// - The data in lib/aria-roles.ts and lib/aria-attributes.ts
//   were generated by scraping the W3C spec.
// - The data in lib/html.ts was manually written by reading this
//   spec: https://www.w3.org/TR/html-aria. So of the two, it’s more likely to
//   be error-prone
//
// The getRole() test comparatively is easy to manually write because there are
// mangeable number of assertions to manually write (a few dozen). But these
// tests are in the hundreds if not thousands, so even manually writing the
// assertions are prone to error.
//
// For this test to have value, we want to test that the large manually-typed arrays
// of attributes are accurate. So to do that,
//
// **Exmmple**
// According to the spec, <body> supports:
//
// - global attributes allowed for the `generic`
// - naming is prohibited (which means aria-label and aria-lballedby are forbidden)
// - `aria-hidden`is forbidden
//
// We have a manually-generated list in lib/html.ts, which could have a mistake. So to
// check it, we rereate that list by other means: first starting with the generic
// attributes, then manually removing `aria-hidden`, e.g.:
//
// ```ts
// const want = [...namingProhibited(roles.generic.supported).filter((a) => a !== 'aria-hidden')];
// ```
//
// When we compare thw 2 lists, they match! We have reduced the odds that the manual list
// is incorrect because it is being recreated a different way, following the spec.
//
// ---
//
// The important thing is to:
// 1. Read the spec for a given element to see what general attributes it _should_ support
// 2. Look at how this library internally pulls data
// 3. Write the assertion by trying to recreate the list in another way, that matches
//    the wording of the spec. Assume that the data in aria-attributes.ts is correct,
//    but it is the HTML -> ARIA mapping that we want to test.
// 4. The test will compare the test, which may have differences. In that case, examine
//    the difference, re-read the spec, and determine where the mismatch came from.

// commonly-used lists
const GLOBAL_ATTRIBUTES = Object.keys(globalAttributes) as ARIAAttribute[];
const BUTTON_ATTRIBUTES = roles.button.supported;
const GENERIC_NO_NAMING = removeProhibited(roles.generic.supported, { nameProhibited: true });
const TEXTBOX_ATTRIBUTES = roles.textbox.supported;
const COMBOBOX_ATTRIBUTES = roles.combobox.supported;

const tests: [
  string,
  { given: Parameters<typeof getSupportedAttributes>; want: ReturnType<typeof getSupportedAttributes> },
][] = [
  ['a', { given: [{ tagName: 'a' }], want: GENERIC_NO_NAMING }],
  ['a (href)', { given: [{ tagName: 'a', attributes: { href: '#' } }], want: roles.link.supported }],
  ['area', { given: [{ tagName: 'area' }], want: GENERIC_NO_NAMING }],
  ['area (href)', { given: [{ tagName: 'area', attributes: { href: '#' } }], want: roles.link.supported }],
  ['abbr', { given: [{ tagName: 'abbr' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['address', { given: [{ tagName: 'address' }], want: roles.group.supported }],
  ['article', { given: [{ tagName: 'article' }], want: roles.article.supported }],
  ['aside', { given: [{ tagName: 'aside' }], want: roles.complementary.supported }],
  ['audio', { given: [{ tagName: 'audio' }], want: roles.application.supported }],
  ['b', { given: [{ tagName: 'b' }], want: GENERIC_NO_NAMING }],
  ['b[role=generic]', { given: [{ tagName: 'b', attributes: { role: 'generic' } }], want: GENERIC_NO_NAMING }],
  ['b[role=button]', { given: [{ tagName: 'b', attributes: { role: 'button' } }], want: BUTTON_ATTRIBUTES }],
  ['base', { given: [{ tagName: 'base' }], want: NO_ATTRIBUTES }],
  ['bdi', { given: [{ tagName: 'bdi' }], want: GENERIC_NO_NAMING }],
  ['bdo', { given: [{ tagName: 'bdo' }], want: GENERIC_NO_NAMING }],
  ['blockquote', { given: [{ tagName: 'blockquote' }], want: roles.blockquote.supported }],
  [
    'body',
    {
      given: [{ tagName: 'body' }],
      want: removeProhibited(roles.generic.supported, { nameProhibited: true, prohibited: ['aria-hidden'] }),
    },
  ],
  ['br', { given: [{ tagName: 'br' }], want: ['aria-hidden'] }],
  ['button', { given: [{ tagName: 'button' }], want: BUTTON_ATTRIBUTES }],
  ['canvas', { given: [{ tagName: 'canvas' }], want: GLOBAL_ATTRIBUTES }],
  [
    'caption',
    {
      given: [{ tagName: 'caption' }],
      want: removeProhibited([...roles.caption.supported], { nameProhibited: true }),
    },
  ],
  ['cite', { given: [{ tagName: 'cite' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  [
    'code',
    {
      given: [{ tagName: 'code' }],
      want: removeProhibited([...roles.code.supported], { nameProhibited: true }),
    },
  ],
  ['col', { given: [{ tagName: 'col' }], want: NO_ATTRIBUTES }],
  ['colgroup', { given: [{ tagName: 'colgroup' }], want: NO_ATTRIBUTES }],
  ['data', { given: [{ tagName: 'data' }], want: GENERIC_NO_NAMING }],
  ['datalist', { given: [{ tagName: 'datalist' }], want: NO_ATTRIBUTES }],
  ['dd', { given: [{ tagName: 'dd' }], want: roles.definition.supported }],
  [
    'del',
    { given: [{ tagName: 'del' }], want: removeProhibited([...roles.deletion.supported], { nameProhibited: true }) },
  ],
  ['details', { given: [{ tagName: 'details' }], want: roles.group.supported }],
  ['dfn', { given: [{ tagName: 'dfn' }], want: removeProhibited([...roles.term.supported], { nameProhibited: true }) }],
  ['dialog', { given: [{ tagName: 'dialog' }], want: roles.dialog.supported }],
  ['div', { given: [{ tagName: 'div' }], want: GENERIC_NO_NAMING }],
  ['div[role=button]', { given: [{ tagName: 'div', attributes: { role: 'button' } }], want: BUTTON_ATTRIBUTES }],
  ['dl', { given: [{ tagName: 'dl' }], want: GLOBAL_ATTRIBUTES }],
  ['dt', { given: [{ tagName: 'dt' }], want: roles.term.supported }],
  ['em', { given: [{ tagName: 'em' }], want: removeProhibited(roles.emphasis.supported, { nameProhibited: true }) }],
  ['embed', { given: [{ tagName: 'embed' }], want: GLOBAL_ATTRIBUTES }],
  ['fieldset', { given: [{ tagName: 'fieldset' }], want: roles.group.supported }],
  [
    'figcaption',
    { given: [{ tagName: 'figcaption' }], want: removeProhibited(roles.caption.supported, { nameProhibited: true }) },
  ],
  ['figure', { given: [{ tagName: 'figure' }], want: roles.figure.supported }],
  ['form', { given: [{ tagName: 'form' }], want: roles.form.supported }],
  ['footer', { given: [{ tagName: 'footer' }], want: roles.contentinfo.supported }],
  ['g', { given: [{ tagName: 'g' }], want: GLOBAL_ATTRIBUTES }],
  ['h1', { given: [{ tagName: 'h1' }], want: roles.heading.supported }],
  ['h2', { given: [{ tagName: 'h2' }], want: roles.heading.supported }],
  ['h3', { given: [{ tagName: 'h3' }], want: roles.heading.supported }],
  ['h4', { given: [{ tagName: 'h4' }], want: roles.heading.supported }],
  ['h5', { given: [{ tagName: 'h5' }], want: roles.heading.supported }],
  ['h6', { given: [{ tagName: 'h6' }], want: roles.heading.supported }],
  ['head', { given: [{ tagName: 'head' }], want: NO_ATTRIBUTES }],
  ['header', { given: [{ tagName: 'header' }], want: roles.banner.supported }],
  ['hgroup', { given: [{ tagName: 'hgroup' }], want: roles.group.supported }],
  ['hr', { given: [{ tagName: 'hr' }], want: roles.separator.supported }],
  ['html', { given: [{ tagName: 'html' }], want: NO_ATTRIBUTES }],
  ['i', { given: [{ tagName: 'i' }], want: GENERIC_NO_NAMING }],
  ['iframe', { given: [{ tagName: 'iframe' }], want: GLOBAL_ATTRIBUTES }],
  ['img (name)', { given: [{ tagName: 'img', attributes: { alt: 'Alt text' } }], want: roles.img.supported }],
  ['img (no name)', { given: [{ tagName: 'img' }], want: ['aria-hidden'] }],
  ['input[type=button]', { given: [{ tagName: 'input', attributes: { type: 'button' } }], want: BUTTON_ATTRIBUTES }],
  [
    'input[type=checkbox]',
    {
      given: [{ tagName: 'input', attributes: { type: 'checkbox' } }],
      want: removeProhibited([...roles.checkbox.supported], { prohibited: ['aria-checked'] }),
    },
  ],
  [
    'input[type=color]',
    { given: [{ tagName: 'input', attributes: { type: 'color' } }], want: [...GLOBAL_ATTRIBUTES, 'aria-disabled'] },
  ],
  ['input[type=date]', { given: [{ tagName: 'input', attributes: { type: 'date' } }], want: TEXTBOX_ATTRIBUTES }],
  [
    'input[type=datetime-local]',
    { given: [{ tagName: 'input', attributes: { type: 'datetime-local' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  ['input[type=email]', { given: [{ tagName: 'input', attributes: { type: 'email' } }], want: TEXTBOX_ATTRIBUTES }],
  [
    'input[type=file]',
    {
      given: [{ tagName: 'input', attributes: { type: 'file' } }],
      want: [...GLOBAL_ATTRIBUTES, 'aria-disabled', 'aria-invalid', 'aria-required'],
    },
  ],
  ['input[type=hidden]', { given: [{ tagName: 'input', attributes: { type: 'hidden' } }], want: NO_ATTRIBUTES }],
  ['input[type=image]', { given: [{ tagName: 'input', attributes: { type: 'image' } }], want: BUTTON_ATTRIBUTES }],
  ['input[type=month]', { given: [{ tagName: 'input', attributes: { type: 'month' } }], want: TEXTBOX_ATTRIBUTES }],
  [
    'input[type=number]',
    { given: [{ tagName: 'input', attributes: { type: 'number' } }], want: roles.spinbutton.supported },
  ],
  [
    'input[type=password]',
    { given: [{ tagName: 'input', attributes: { type: 'password' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  [
    'input[type=radio]',
    {
      given: [{ tagName: 'input', attributes: { type: 'radio' } }],
      want: removeProhibited([...roles.radio.supported], { prohibited: ['aria-checked'] }),
    },
  ],
  ['input[type=range]', { given: [{ tagName: 'input', attributes: { type: 'range' } }], want: roles.slider.supported }],
  ['input[type=reset]', { given: [{ tagName: 'input', attributes: { type: 'reset' } }], want: BUTTON_ATTRIBUTES }],
  [
    'input[type=search]',
    { given: [{ tagName: 'input', attributes: { type: 'search' } }], want: roles.searchbox.supported },
  ],
  ['input[type=shrek]', { given: [{ tagName: 'input', attributes: { type: 'shrek' } }], want: TEXTBOX_ATTRIBUTES }],
  ['input[type=submit]', { given: [{ tagName: 'input', attributes: { type: 'submit' } }], want: BUTTON_ATTRIBUTES }],
  ['input[type=tel]', { given: [{ tagName: 'input', attributes: { type: 'tel' } }], want: TEXTBOX_ATTRIBUTES }],
  ['input[type=text]', { given: [{ tagName: 'input', attributes: { type: 'text' } }], want: TEXTBOX_ATTRIBUTES }],
  ['input[type=time]', { given: [{ tagName: 'input', attributes: { type: 'time' } }], want: TEXTBOX_ATTRIBUTES }],
  ['input[type=url]', { given: [{ tagName: 'input', attributes: { type: 'url' } }], want: TEXTBOX_ATTRIBUTES }],
  ['input[type=week]', { given: [{ tagName: 'input', attributes: { type: 'week' } }], want: TEXTBOX_ATTRIBUTES }],

  // Note: for input lists, ONLY text, search, tel, url, email, and invalid
  // should produce a combobox. Other lists are ignored. But we want to test
  // all of them to guarantee this behavior is correct.
  // @see https://www.w3.org/TR/html-aria/#el-input-text-list
  ['input (list)', { given: [{ tagName: 'input', attributes: { list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES }],
  [
    'input[type=button] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'button', list: 'suggestions' } }],
      want: BUTTON_ATTRIBUTES,
    },
  ],
  [
    'input[type=color] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'color', list: 'suggestions' } }],
      want: [...GLOBAL_ATTRIBUTES, 'aria-disabled'],
    },
  ],
  [
    'input[type=date] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'date', list: 'suggestions' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  [
    'input[type=datetime-local] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'datetime-local', list: 'suggestions' } }],
      want: TEXTBOX_ATTRIBUTES,
    },
  ],
  [
    'input[type=email] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'email', list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES },
  ],
  [
    'input[type=file] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'file', list: 'suggestions' } }],
      want: [...GLOBAL_ATTRIBUTES, 'aria-disabled', 'aria-invalid', 'aria-required'],
    },
  ],
  [
    'input[type=hidden] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'hidden', list: 'suggestions' } }], want: NO_ATTRIBUTES },
  ],
  [
    'input[type=month] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'month', list: 'suggestions' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  [
    'input[type=number] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'number', list: 'suggestions' } }],
      want: roles.spinbutton.supported,
    },
  ],
  [
    'input[type=password] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'password', list: 'suggestions' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  [
    'input[type=radio] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'radio', list: 'suggestions' } }],
      want: roles.radio.supported.filter((a) => a !== 'aria-checked'),
    },
  ],
  [
    'input[type=range] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'range', list: 'suggestions' } }], want: roles.slider.supported },
  ],
  [
    'input[type=reset] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'reset', list: 'suggestions' } }],
      want: BUTTON_ATTRIBUTES,
    },
  ],
  [
    'input[type=search] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'search', list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES },
  ],
  [
    'input[type=submit] (list)',
    {
      given: [{ tagName: 'input', attributes: { type: 'submit', list: 'suggestions' } }],
      want: BUTTON_ATTRIBUTES,
    },
  ],
  [
    'input[type=tel] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'tel', list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES },
  ],
  [
    'input[type=text] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'text', list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES },
  ],
  [
    'input[type=shrek] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'shrek', list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES },
  ],
  [
    'input[type=time] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'time', list: 'suggestions' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  [
    'input[type=url] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'url', list: 'suggestions' } }], want: COMBOBOX_ATTRIBUTES },
  ],
  [
    'input[type=week] (list)',
    { given: [{ tagName: 'input', attributes: { type: 'week', list: 'suggestions' } }], want: TEXTBOX_ATTRIBUTES },
  ],
  [
    'ins',
    {
      given: [{ tagName: 'ins' }],
      want: removeProhibited([...GLOBAL_ATTRIBUTES, ...roles.insertion.supported], { nameProhibited: true }),
    },
  ],
  ['kbd', { given: [{ tagName: 'kbd' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['label', { given: [{ tagName: 'label' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['legend', { given: [{ tagName: 'legend' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['li', { given: [{ tagName: 'li' }], want: roles.listitem.supported }],
  ['link', { given: [{ tagName: 'link' }], want: NO_ATTRIBUTES }],
  ['main', { given: [{ tagName: 'main' }], want: roles.main.supported }],
  ['map', { given: [{ tagName: 'map' }], want: NO_ATTRIBUTES }],
  [
    'mark',
    {
      given: [{ tagName: 'mark' }],
      want: removeProhibited([...roles.mark.supported], { nameProhibited: true }),
    },
  ],
  ['math', { given: [{ tagName: 'math' }], want: roles.math.supported }],
  ['menu', { given: [{ tagName: 'menu' }], want: roles.list.supported }],
  ['meta', { given: [{ tagName: 'meta' }], want: NO_ATTRIBUTES }],
  ['meter', { given: [{ tagName: 'meter' }], want: roles.meter.supported }],
  ['nav', { given: [{ tagName: 'nav' }], want: roles.navigation.supported }],
  ['noscript', { given: [{ tagName: 'noscript' }], want: NO_ATTRIBUTES }],
  ['object', { given: [{ tagName: 'object' }], want: GLOBAL_ATTRIBUTES }],
  ['ol', { given: [{ tagName: 'ol' }], want: roles.list.supported }],
  ['optgroup', { given: [{ tagName: 'optgroup' }], want: roles.group.supported }],
  ['option', { given: [{ tagName: 'option' }], want: roles.option.supported }],
  ['output', { given: [{ tagName: 'output' }], want: roles.status.supported }],
  [
    'p',
    { given: [{ tagName: 'p' }], want: removeProhibited([...roles.paragraph.supported], { nameProhibited: true }) },
  ],
  ['picture', { given: [{ tagName: 'picture' }], want: ['aria-hidden'] }],
  ['pre', { given: [{ tagName: 'pre' }], want: GENERIC_NO_NAMING }],
  ['progress', { given: [{ tagName: 'progress' }], want: roles.progressbar.supported }],
  ['q', { given: [{ tagName: 'q' }], want: GENERIC_NO_NAMING }],
  ['rp', { given: [{ tagName: 'rp' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['rt', { given: [{ tagName: 'rt' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['ruby', { given: [{ tagName: 'ruby' }], want: GLOBAL_ATTRIBUTES }],
  [
    's',
    {
      given: [{ tagName: 's' }],
      want: removeProhibited([...roles.deletion.supported], { nameProhibited: true }),
    },
  ],
  ['samp', { given: [{ tagName: 'samp' }], want: GENERIC_NO_NAMING }],
  ['script', { given: [{ tagName: 'script' }], want: NO_ATTRIBUTES }],
  ['search', { given: [{ tagName: 'search' }], want: [...GLOBAL_ATTRIBUTES, ...roles.search.supported] }],
  [
    'section (name)',
    {
      given: [{ tagName: 'section', attributes: { 'aria-label': 'My section' } }],
      want: [...GLOBAL_ATTRIBUTES, ...roles.region.supported],
    },
  ],
  ['section (no name)', { given: [{ tagName: 'section' }], want: GENERIC_NO_NAMING }],
  ['select', { given: [{ tagName: 'select' }], want: COMBOBOX_ATTRIBUTES }],
  ['select[size=0]', { given: [{ tagName: 'select', attributes: { size: 0 } }], want: COMBOBOX_ATTRIBUTES }],
  ['select[size=1]', { given: [{ tagName: 'select', attributes: { size: 1 } }], want: COMBOBOX_ATTRIBUTES }],
  ['select[size=2]', { given: [{ tagName: 'select', attributes: { size: 2 } }], want: roles.listbox.supported }],
  [
    'select[multiple]',
    { given: [{ tagName: 'select', attributes: { multiple: true } }], want: roles.listbox.supported },
  ],
  [
    'select[role=generic]',
    { given: [{ tagName: 'select', attributes: { role: 'generic' } }], want: roles.generic.supported },
  ],
  ['slot', { given: [{ tagName: 'slot' }], want: NO_ATTRIBUTES }],
  ['small', { given: [{ tagName: 'small' }], want: GENERIC_NO_NAMING }],
  ['source', { given: [{ tagName: 'source' }], want: NO_ATTRIBUTES }],
  ['span', { given: [{ tagName: 'span' }], want: GENERIC_NO_NAMING }],
  [
    'strong',
    { given: [{ tagName: 'strong' }], want: removeProhibited(roles.strong.supported, { nameProhibited: true }) },
  ],
  ['style', { given: [{ tagName: 'style' }], want: NO_ATTRIBUTES }],
  ['sub', { given: [{ tagName: 'sub' }], want: removeProhibited(roles.subscript.supported, { nameProhibited: true }) }],
  ['summary', { given: [{ tagName: 'summary' }], want: GLOBAL_ATTRIBUTES.concat(['aria-disabled', 'aria-haspopup']) }],
  [
    'sup',
    { given: [{ tagName: 'sup' }], want: removeProhibited(roles.superscript.supported, { nameProhibited: true }) },
  ],
  ['svg', { given: [{ tagName: 'svg' }], want: roles['graphics-document'].supported }],
  ['table', { given: [{ tagName: 'table' }], want: roles.table.supported }],
  ['tbody', { given: [{ tagName: 'tbody' }], want: roles.rowgroup.supported }],
  ['td', { given: [{ tagName: 'td' }], want: roles.cell.supported }],
  ['template', { given: [{ tagName: 'template' }], want: NO_ATTRIBUTES }],
  ['textarea', { given: [{ tagName: 'textarea' }], want: TEXTBOX_ATTRIBUTES }],
  ['tfoot', { given: [{ tagName: 'tfoot' }], want: roles.rowgroup.supported }],
  ['th', { given: [{ tagName: 'th' }], want: roles.cell.supported }],
  [
    'th (thead)',
    { given: [{ tagName: 'th' }, { ancestors: [{ tagName: 'thead' }] }], want: roles.columnheader.supported },
  ],
  ['th', { given: [{ tagName: 'th', attributes: { scope: 'row' } }], want: roles.rowheader.supported }],
  ['thead', { given: [{ tagName: 'thead' }], want: roles.rowgroup.supported }],
  [
    'time',
    {
      given: [{ tagName: 'time' }],
      want: removeProhibited([...roles.time.supported], { nameProhibited: true }),
    },
  ],
  ['title', { given: [{ tagName: 'title' }], want: NO_ATTRIBUTES }],
  ['tr', { given: [{ tagName: 'tr' }], want: roles.row.supported }],
  ['track', { given: [{ tagName: 'track' }], want: NO_ATTRIBUTES }],
  ['u', { given: [{ tagName: 'u' }], want: GENERIC_NO_NAMING }],
  ['ul', { given: [{ tagName: 'ul' }], want: roles.list.supported }],
  ['var', { given: [{ tagName: 'var' }], want: removeProhibited(GLOBAL_ATTRIBUTES, { nameProhibited: true }) }],
  ['video', { given: [{ tagName: 'video' }], want: roles.application.supported }],
  ['wbr', { given: [{ tagName: 'wbr' }], want: ['aria-hidden'] }],
];

describe('getSupportedAttributes', () => {
  const testedTags = new Set<string>();

  test.each(tests)('%s', (name, { given, want }) => {
    checkTestAndTagName(name, given[0].tagName);
    testedTags.add(given[0].tagName);
    const wantSorted = [...new Set(want)].sort((a, b) => a.localeCompare(b));
    expect(getSupportedAttributes(...given)).toEqual(wantSorted);
  });

  test('all tags are tested', () => {
    const missingTags = Object.keys(tags).filter((tag) => !testedTags.has(tag));
    expect(missingTags).toEqual([]);
  });
});

describe('isSupportedAttribute', () => {
  const allAttributes = Object.keys(attributes) as ARIAAttribute[];
  allAttributes.sort((a, b) => a.localeCompare(b));
  test.each(tests)('%s', (_, { given, want }) => {
    for (const attr of allAttributes) {
      expect(isSupportedAttribute(attr, ...given)).toBe(want.includes(attr));
    }
  });
});

const valueTests: [
  string,
  {
    given: Parameters<typeof isValidAttributeValue>;
    want: ReturnType<typeof isValidAttributeValue>;
  },
][] = [
  // enum
  ['aria-checked="true"', { given: ['aria-checked', 'true'], want: true }],
  ['aria-checked="false"', { given: ['aria-checked', 'false'], want: true }],
  ['aria-checked="mixed"', { given: ['aria-checked', 'mixed'], want: true }],
  ['aria-checked={true}', { given: ['aria-checked', true], want: true }],
  ['aria-checked={false}', { given: ['aria-checked', false], want: true }],
  ['aria-checked=""', { given: ['aria-checked', ''], want: false }], // acceptable for boolean, but this is an enum!
  ['aria-checked="?"', { given: ['aria-checked', undefined], want: false }], // "undefined" is a valid value, however, this method assumes presence of an attribute (undefined is absence)
  ['aria-checked="foobar"', { given: ['aria-checked', 'foobar'], want: false }],

  // boolean
  ['aria-disabled="true"', { given: ['aria-disabled', 'true'], want: true }],
  ['aria-disabled="false"', { given: ['aria-disabled', 'false'], want: true }],
  ['aria-disabled={true}', { given: ['aria-disabled', true], want: true }],
  ['aria-disabled={false}', { given: ['aria-disabled', false], want: true }],
  ['aria-disabled=""', { given: ['aria-disabled', ''], want: true }],
  ['aria-disabled="foobar"', { given: ['aria-disabled', 'foobar'], want: false }],
];

describe('isValidAttributeValue', () => {
  test.each(valueTests)('%s', (_, { given, want }) => {
    expect(isValidAttributeValue(...given)).toBe(want);
  });
});
